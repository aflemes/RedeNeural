/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redeneural.view;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Scanner;
import redeneural.model.Neuronio;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import redeneural.Backpropagation;

/**
 *
 * @author aflemes
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    private Backpropagation rede;
    private Double[][] patternInput   = new Double[1][17];
    private Double[][] expectedOutput = new Double[1][10]; 
    private ArrayList<Neuronio> lstResultados = new ArrayList<Neuronio>();
    NumberFormat formater = new DecimalFormat("#0.000000");
    private int numeroTreinamentos = 200;
    
    public Interface() {
        initComponents();
        initRede();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabela = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jTestValores = new javax.swing.JTextField();
        jMessage = new javax.swing.JLabel();
        jMatrizConfusao = new javax.swing.JButton();
        jTeste = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Iniciar Treinamento");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Iniciar Amostra");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Neurônio", "Saída"
            }
        ));
        jTabela.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jTabela);

        jButton3.setText("Testar valores");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTestValores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTestValoresActionPerformed(evt);
            }
        });

        jMessage.setPreferredSize(new java.awt.Dimension(34, 14));

        jMatrizConfusao.setText("Matriz de Confusão");
        jMatrizConfusao.setEnabled(false);
        jMatrizConfusao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMatrizConfusaoActionPerformed(evt);
            }
        });

        jTeste.setText("Iniciar Teste");
        jTeste.setEnabled(false);
        jTeste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTesteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTestValores)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTeste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jMatrizConfusao))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jTestValores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTeste)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMatrizConfusao))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jMatrizConfusao.setEnabled(false);
        jTeste.setEnabled(false);
        
        Thread treinamento = new Thread(){
            public void run(){
                jMessage.setText("Treinando a rede neural, aguarde...");
                initTreinamento();   
                jTeste.setEnabled(true);
            }
        };

        treinamento.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        loadAmostra(" 88, 92,  2, 99, 16, 66, 94, 37, 70,  0,  0, 24, 42, 65,100,100, 8");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTestValoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTestValoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTestValoresActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String linha = jTestValores.getText();
        
        if (linha.split(",").length != 17){
            JOptionPane.showMessageDialog(null," Quantidade de valores inválido!"); 
        }
        else            
            loadAmostra(jTestValores.getText());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void listaResultadosTela(int neuronioEsperado){
        Neuronio neuronioTemp         = new Neuronio();
        Double maiorValor = 0.0;
        Double[] saida = rede.getOutput();
        int indice = 0;
        DefaultTableModel tabelaModelo = (DefaultTableModel) jTabela.getModel();
        tabelaModelo.setNumRows(0); //limpa a tabela
        for (int i = 0; i < saida.length; i++) {//seta cor
            tabelaModelo.addRow(new String[]{"Neuronio " + (i), "" + formater.format(saida[i])}); 
            
            if (saida[i] > maiorValor){
                indice = i;
                maiorValor = saida[i];
            }
        }
        neuronioTemp.setId(neuronioEsperado);
        neuronioTemp.setResultadoObtido(indice);
                
        lstResultados.add(neuronioTemp);
        
        jTabela.setRowSelectionInterval(indice, indice);
    }
    private void jMatrizConfusaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMatrizConfusaoActionPerformed
        // TODO add your handling code here:
        Thread matrizConfusao = new Thread(){
            public void run(){
                jMessage.setText(" Iniciando a Matriz de Confusão");
                MatrizConfusao jMatrizConfusao = new MatrizConfusao(lstResultados);
                jMatrizConfusao.setVisible(true);                
                jMessage.setText("");                
            }
        };

        matrizConfusao.start();
        
        
    }//GEN-LAST:event_jMatrizConfusaoActionPerformed

    private void jTesteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTesteActionPerformed
        // TODO add your handling code here:
        Thread aplicacao = new Thread(){
            public void run(){
                jMessage.setText("Aplicando dados, aguarde...");
                initAplicacao();    
                jMatrizConfusao.setEnabled(true);
            }
        };

        aplicacao.start();
    }//GEN-LAST:event_jTesteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }
    
    private void initAplicacao(){
        String[] split;
        String linha;
        double valor = 0.0;
        int neuronioEsperado = 0, qtdeLinhasLidas = 0;
        
        long tempoInicial = System.currentTimeMillis();
        
        try {
            InputStream is = this.getClass().getResourceAsStream("/redeneural/data/pendigits.testing");
            BufferedReader lerArq = new BufferedReader(new InputStreamReader(is));
            linha = lerArq.readLine(); // lê a primeira linha           
            
            while (linha != null) {
                split = linha.split(",");
                
                for (int i = 0; i < split.length - 1; i++) {
                    valor = Double.parseDouble(split[i]);
                    if (valor > 0)
                        valor = valor / 10;
                    
                    patternInput[0][i] = valor;
                }
                neuronioEsperado = Integer.parseInt(split[split.length - 1].trim());
                
                for (int i = 0; i < 10; i++) {
                    //a ultima posicao do arquivo e destinado a classe esperada
                    if ((i) == neuronioEsperado){
                        expectedOutput[0][i] = 1.0;
                    }
                    else
                        expectedOutput[0][i] = 0.0;
                }
                
                rede.setTrainingData(patternInput, expectedOutput);
                rede.aplication(numeroTreinamentos);
                
                atualizaListaResultados(neuronioEsperado);
                
                linha = lerArq.readLine(); // lê da segunda até a última linha
                qtdeLinhasLidas++;                
            }            
            lerArq.close();
        } catch (IOException e) {
            System.err.printf("Erro na abertura do arquivo: %s.\n",
            e.getMessage());
        }
        
        
        long tempoFinal = System.currentTimeMillis();
        
        jMessage.setText("O treinamento concluído em " + (tempoFinal - tempoInicial) + " ms");
    }
    
    private void initTreinamento(){
        String[] split;
        String linha;
        double valor = 0.0;
        int neuronioEsperado = 0, qtdeLinhasLidas = 0;
        
        long tempoInicial = System.currentTimeMillis();
        
        try {
            InputStream is = this.getClass().getResourceAsStream("/redeneural/data/pendigits.trainning");
            BufferedReader lerArq = new BufferedReader(new InputStreamReader(is));
            
            linha = lerArq.readLine(); // lê a primeira linha           
            
            while (linha != null) {
                split = linha.split(",");
                
                for (int i = 0; i < split.length - 1; i++) {
                    valor = Double.parseDouble(split[i]);
                    if (valor > 0)
                        valor = valor / 10;
                    
                    patternInput[0][i] = valor;
                }
                neuronioEsperado = Integer.parseInt(split[split.length - 1].trim());
                
                for (int i = 0; i < 10; i++) {
                    //a ultima posicao do arquivo e destinado a classe esperada
                    if ((i) == neuronioEsperado){
                        expectedOutput[0][i] = 1.0;
                    }
                    else
                        expectedOutput[0][i] = 0.0;
                }
                
                rede.setTrainingData(patternInput, expectedOutput);
                rede.train(numeroTreinamentos);
                
                linha = lerArq.readLine(); // lê da segunda até a última linha
                qtdeLinhasLidas++;                
            }            
            lerArq.close();
        } catch (IOException e) {
            System.err.printf("Erro na abertura do arquivo: %s.\n",
            e.getMessage());
        }
        
        
        long tempoFinal = System.currentTimeMillis();
        
        jMessage.setText("O treinamento concluído em " + (tempoFinal - tempoInicial) + " ms");
    }
    
    private void atualizaListaResultados(int resultadoEsperado){
        Double[] saida = rede.getOutput();
        int indice = 0;
        Double maiorValor = 0.0;
        Neuronio neuronioTemp  = new Neuronio();
        
        for (int i = 0; i < saida.length; i++) {//seta cor
            if (saida[i] > maiorValor){
                indice = i;
                maiorValor = saida[i];
            }
        }
        neuronioTemp.setId(resultadoEsperado);
        neuronioTemp.setResultadoObtido(indice);
                
        lstResultados.add(neuronioTemp);
    }
    
    private void loadAmostra(String linha){
        Double maiorValor = 0.0;
        int indice = 0;
        Double[][] patternInputUniq   = new Double[1][17];
        Double[][] expectedOutputUniq = new Double[1][10]; 
        Neuronio neuronioTemp         = new Neuronio();        
        String elementos[]            = linha.split(",");
        
        for (int i = 0; i < elementos.length - 1; i++) {
            patternInputUniq[0][i] = Double.parseDouble(elementos[i].trim()) / 10;
        }
        
        for (int i = 0; i < 10; i++) {
            if (Integer.parseInt(elementos[elementos.length - 1].trim()) == i){
                expectedOutputUniq[0][i]  = 1.0;
            }
            else 
                expectedOutputUniq[0][i]  = 0.0;            
        }        
        rede.setTrainingData(patternInputUniq, expectedOutputUniq);
        double erro = rede.train(numeroTreinamentos); //treinamento
        
        Double[] saida = rede.getOutput();
        DefaultTableModel tabelaModelo = (DefaultTableModel) jTabela.getModel();
        tabelaModelo.setNumRows(0); //limpa a tabela
        for (int i = 0; i < saida.length; i++) {//seta cor
            tabelaModelo.addRow(new String[]{"Neuronio " + (i), "" + formater.format(saida[i])}); 
            
            if (saida[i] > maiorValor){
                indice = i;
                maiorValor = saida[i];
            }
        }
        jTabela.setRowSelectionInterval(indice, indice);
        
        
        neuronioTemp.setId(8);
        neuronioTemp.setResultadoObtido(indice);
                
        lstResultados.add(neuronioTemp);
    }
    
    private void initRede(){
        rede = new Backpropagation();
    }
    
    private void initMatrizConfusao(){
        jMatrizConfusao.setEnabled(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jMatrizConfusao;
    private javax.swing.JLabel jMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTabela;
    private javax.swing.JTextField jTestValores;
    private javax.swing.JButton jTeste;
    // End of variables declaration//GEN-END:variables
}
