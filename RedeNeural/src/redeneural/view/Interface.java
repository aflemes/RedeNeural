/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redeneural.view;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import redeneural.model.Neuronio;
import redeneural.model.Perceptron;

/**
 *
 * @author aflemes
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    private Perceptron perceptron;
    private ArrayList<Perceptron> lstPerceptron = new ArrayList<>();
    
    public Interface() {
        initComponents();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Iniciar Treinamento");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Iniciar Amostra");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(243, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(190, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        loadFile();
        initTreinamento();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        loadAmostraTemporaria();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }
    
    private void loadFile(){
        String[] split;
        String linha;
        Perceptron perceptronTemp;
        ArrayList<Neuronio> lstNeuronioEntradaTemp;
        Neuronio neuronioTemp;
        
        int classe = 0;
        double valor = 0.0;
        
        try {
            FileReader arq = new FileReader("src\\redeneural\\data\\pendigits.trainning");
            BufferedReader lerArq = new BufferedReader(arq);
            linha = lerArq.readLine(); // lê a primeira linha           

            while (linha != null) {
                perceptronTemp         = new Perceptron();
                lstNeuronioEntradaTemp = new ArrayList<Neuronio>();
                classe = 0;
                split = linha.split(",");
                
                for (int i = 0; i < split.length; i++) {
                    valor = Double.parseDouble(split[i]);
                    if (valor > 0)
                        valor = valor / 10;
                    
                    neuronioTemp = new Neuronio();
                    neuronioTemp.setEntrada(valor);
                                                            
                    if (i == split.length - 1) {
                       classe = Integer.parseInt(split[i].trim());
                    }
                    
                    lstNeuronioEntradaTemp.add(neuronioTemp);
                }
                        
                perceptronTemp.setNeuronioEntrada(lstNeuronioEntradaTemp);
                perceptronTemp.setClasse(classe);
                //
                lstPerceptron.add(perceptronTemp);
                linha = lerArq.readLine(); // lê da segunda até a última linha
            }

            arq.close();
        } catch (IOException e) {
            System.err.printf("Erro na abertura do arquivo: %s.\n",
            e.getMessage());
        }
        
        System.out.println("Arquivo lido com sucesso! ");
    }
    
    private void loadAmostraTemporaria(){
        perceptron = new Perceptron();
        ArrayList<Neuronio> lstNeuronios = new ArrayList<Neuronio>();
        
        Neuronio neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(4.7);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(10.0);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(2.7);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(8.1);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(5.7);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(3.7);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(2.6);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(0.0);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(0.0);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(2.3);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(5.6);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(5.3);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(10.0);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(9.0);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(4.0);
        lstNeuronios.add(neuronioTemp);
        
        neuronioTemp = new Neuronio();
        neuronioTemp.setEntrada(9.8);
        lstNeuronios.add(neuronioTemp);
        
        perceptron.setClasse(8);
        perceptron.setNeuronioEntrada(lstNeuronios);
        
        for (int i = 0; i < 10; i++) {
            perceptron.processar();
        }        
    }

    private void initTreinamento(){
        Perceptron perceptronTemp = new Perceptron();
        
        for (int i=0; i < 100; i++){
            for (int j=0; j < lstPerceptron.size();j++){
                perceptronTemp = lstPerceptron.get(j);
                perceptronTemp.processar();
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
